<div class="container mt-3">
  <h3>旅行企画 | Step③ - 入力情報の確認</h3>
  <div class="row border-top pt-4" style="height: 60%">
    <div class="col-6">
      <div class="h-100 rounded" id='map'></div>
    </div>
    <div class="col-6">
      <div class="row">
        <!-- 経由地リスト -->
        <div class="col-6">
          <label>経由地リスト</label>
          <ul id="route-list" class="list-group"></ul>
        </div>
        <!-- 道のり -->
        <div class="col-6">
          <label>道のり - 時間</label>
          <ul id="route-info" class="list-group"></ul>
        </div>
      </div>
    </div>
  </div>
  
  <!-- スポット情報確認 -->
  <%= form_with model: @plan, url: plans_path, method: :post, local: true do |f| %>
  <div class="mt-3">
    <table class="table table-borderless rounded text-center" style="background:rgba(212,220,218,0.4);">
      <tr>
        <th style="vertical-align: middle;">企画名</th>
        <td class="w-75"><%= params[:plan][:plan_name] %></td>
      </tr>
      <tr>
        <th style="vertical-align: middle;">期間</th>
        <td class="w-75">
          出発日：<%= @start_day  %>
          <span>　〜　</span>
          帰着日：<%= @end_day %>
        </td>
      </tr>
      <tr>
        <th style="vertical-align: middle;">集合場所</th>
        <td class="w-75"><%= @meeting_place %></td>
      </tr>
      <tr>
        <th style="vertical-align: middle;">集合時間</th>
        <td class="w-75"><%= @meeting_time %></td>
      </tr>
      <tr>
        <th style="vertical-align: middle;">連絡事項</th>
        <td class="w-75"><%= @memo %></td>
      </tr>
      <tr>
        <th style="vertical-align: middle;">企画サムネイル</th>
        <td class="w-75"><%= f.file_field :image, accept: "image/*" %></td>
      </tr>
    </table>
    
    <!-- 保存時に使用する情報 -->
    <%= f.hidden_field :user_id, :value => current_user.id %>
    <%= f.hidden_field :plan_name, :value => params[:plan][:plan_name] %>
    <%= f.hidden_field :start_day, :value => @start_day.to_date %>
    <%= f.hidden_field :end_day, :value => @end_day.to_date %>
    <%= f.hidden_field :meeting_place, :value => @meeting_place %>
    <%= f.hidden_field :meeting_time, :value => @meeting_time %>
    <%= f.hidden_field :memo, :value => @memo %>
    
    <%= f.fields_for @place do |i| %>
      <%= i.hidden_field :name, :value => @spot_names %>
      <%= i.hidden_field :lat, :value => @spot_lats %>
      <%= i.hidden_field :lng, :value => @spot_lngs %>
    <% end %>
    
    <div class="d-flex justify-content-center border-top mt-4 mb-5">
      <%= f.submit "旅行企画を投稿する", class: "btn btn-outline-secondary w-50 mt-3 mb-5" %>
    </div>  
  </div>
  <% end %>
</div>

<script>
  // codeAddressでも使用する為、mapを関数外で定義&geocoderも用意
  let map
  let geocoder
  let marker = [];
  let info_window = [];
  let mark_pos = [];
  
  // 確認画面表示時にマップ・経由地・ルート情報の表示
  window.onload = function initMap(){
    // geocoder初期化
    geocoder = new google.maps.Geocoder()
    
    // mapの初期位置設定(東京駅)
    // lat：経度 lng：緯度
    map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 35.68136165284377, lng: 139.76705995711325},
    // 地図の拡大率(大きいほど拡大 1〜21)
    zoom: 7
    });
    
    // マップ情報・ピンを表示
    for (let i = 0; i < gon.spot_names.length; i++) {
      // 入力を取得
      let inputAddress = gon.spot_names[i];
    
      // geocodingしたあとmapを移動
      geocoder.geocode( { 'address': inputAddress}, function(results, status) {
        if (status == 'OK') {
          // 変数に情報を入れる
          mark_pos[i] = results[0].geometry.location;
    
    　　  　// google.maps.MarkerでGoogleMap上の指定位置にマーカが立つ
          marker[i] = new google.maps.Marker({
            map: map,
            position: mark_pos[i]
          });
          
          // 吹き出しに表示する内容(ボタンで経由地に追加)
          info_window[i] = new google.maps.InfoWindow({
            content: gon.spot_names[i]
          });
          
          // マーカー上に吹き出しが自動で出る
          info_window[i].open(map,marker[i]);
          
          // クリックしたら吹き出しをマーカ上に出す
          marker[i].addListener('click', function(){
            info_window[i].open(map,marker[i]);
          });
          
        } else {
          // エラー時の処理
          alert('該当結果がありませんでした：' + status);
        }
      });
    }
    
    // 経由地リストの表示
    for (let i = 0; i < gon.spot_names.length; i++) {
      var li = $('<li>', {
        text: gon.spot_names[i],
        "class": "list-group-item",
        "id": "route-item"
      });
      li.attr("data-lat", gon.spot_lats[i]); // data-latという属性にlatを入れる
      li.attr("data-lng", gon.spot_lngs[i]); // data-lngという属性にlngを入れる
      $('#route-list').append(li);      // idがroute-listの要素の一番後ろにliを追加
    }
    
    // ルート検索画面で表示したルートを再表示
    var points = $('#route-list li');
    var route_names = [];
    var route_lats = [];
    var route_lngs = [];
    
    // hidden_fieldにスポット位置情報を入れる (データ保存用)
    for (let i = 0; i < points.length; i++) {
      route_names[i] = points[i].textContent;
      route_lats[i] = document.getElementById('route-list').children[i].getAttribute('data-lat');
      route_lngs[i] = document.getElementById('route-list').children[i].getAttribute('data-lng');
      //document.getElementById('lng').value = pos_lng;
    }
  
    // 2地点以上の場合
    if (points.length >= 2){
      var origin;          // 開始地点
      var destination;     // 終了地点
      var waypoints = [];  // 経由地点
  
      // origin, destination, waypointsを設定する
      for (let i = 0; i < points.length; i++) {
          points[i] = new google.maps.LatLng($(points[i]).attr("data-lat"), $(points[i]).attr("data-lng"));
          if (i == 0){
            origin = points[i];
          } else if (i == points.length-1){
            destination = points[i];
          } else {
            waypoints.push({ location: points[i], stopover: true });
          }
      }
      
      // リクエストの作成
      var request = {
        origin:      origin,
        destination: destination,
        waypoints: waypoints,
        travelMode:  google.maps.TravelMode.DRIVING // 運転ルートで検索
      }
      
      // ルートサービスのリクエスト
      new google.maps.DirectionsService().route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          new google.maps.DirectionsRenderer({
            map: map,
            suppressMarkers : true
          }).setDirections(response);
          
          // 距離・時間を表示
          var data = response.routes[0].legs;
          var dist_sum = 0;
          var times = [];
          var hour_sum = 0;
          var minute_sum = 0;
          var time_sum = 0;
          
          for (let i = 0; i < data.length; i++) {
            // ルート検索したら道のり・時間を表示
            var info = $('<li>', {
              text: `${data[i].distance.text} - ${data[i].duration.text}`,
              "class": "list-group-item"
            });
            $('#route-info').append(info);  // idがroute-infoの要素の一番後ろに道のり情報を追加
            
            // 道のりの合計値を取得
            if (data[i].distance.text.includes('km')){
              // `km`単位でなければ加算しない(距離が近いと`m`で検索結果が出る)
              dist_sum += Math.round(parseFloat(data[i].distance.text) * 10) / 10;
            }
            
            // 時間の合計値を取得
            // 単位が`時間`か`分`かで計算を分ける
            if (data[i].duration.text.includes('時間')){
              times = data[i].duration.text.split('間');
              hour_sum += Math.round(parseFloat(times[0]));
              minute_sum += Math.round(parseFloat(times[1]));
            } else {
              minute_sum += Math.round(parseFloat(data[i].duration.text));
            }
            
            if (minute_sum > 59){
              hour_sum += Math.floor(minute_sum / 60);
              minute_sum = minute_sum % 60;
            }
            
            if (hour_sum == 0){
              time_sum = `${minute_sum}分`
            } else {
              time_sum = `${hour_sum}時間 ${minute_sum}分`
            }
            
            // 最後の繰り返し処理で行う事
            if (i == data.length - 1){
              info = $('<li>', {
                text: `合計：${dist_sum} km - ${time_sum}`,
                "class": "list-group-item"
              });
              $('#route-info').append(info);  // idがroute-infoの要素の一番後ろに合計を追加
              
              info = $('<li>', {
                text: `-`,
                "class": "list-group-item"
              });
              $('#route-info').prepend(info);  // idがroute-infoの要素の一番前に空の情報を追加
            }
          }
        }
      });
    }
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['SECRET_KEY'] %>&callback=initMap" async defer></script>