<div class="container">
  <div class="row d-flex flex-column mt-5 w-100 mx-auto">
    <div class="row mb-2 justify-content-between">
      <div>
        <span class="font-weight-bold">投稿日：<%= @plan.created_at.strftime("%Y.%m.%d") %></span><br>
        <span class="h2 font-weight-bold" style="color: #5c9291; letter-spacing: 0.12em; line-height: 1.5;"><%= @plan.plan_name %></span><br>
        <span>期間：<%= @start_day.strftime("%Y.%m.%d") %> 〜 <%= @end_day.strftime("%Y.%m.%d") %></span> | 
        <span>参加中：<%= @plan.plan_members.count %>名</span>
        <% if @plan.end_day.before? Date.today %>
          <br><span class="font-weight-bold text-danger">この旅行は終了しています。</span>
        <% end %>
      </div>
      <div class="d-flex align-items-center">
        <% if @plan.user_id == current_user.id %>
          <%= link_to "旅行を編集する", edit_plan_path(@plan.id), class: "w-100 btn btn-success" %>
        <% elsif @plan.member?(current_user) %>
          <%= link_to "この旅行から抜ける", plan_out_path(@plan.id), class: "w-100 btn btn-danger" %>
        <% else %>
          <%= link_to "この旅行に参加する", plan_join_path(@plan.id), class: "w-100 btn btn-primary" %>
        <% end %>
      </div>
    </div>
    
    <div class="row border-top py-4">
      <div class="col-3 d-flex justify-content-left">
        <% if @plan.image.attached? %>
          <%= image_tag @plan.image, class: "rounded", style: "max-width: 100%; height: 16vw; object-fit: cover" %>
        <% else %>
          <%= image_tag asset_path('noimage.jpg'), class: "rounded", style: "max-width: 100%; height: 16vw; object-fit: cover" %>
        <% end %>
      </div>
        
      <div class="col-9">
        <div class="form-inline">
          <div class="rounded px-3 py-1 text-center" style="width:fit-content; background-color: #d4dcda;">
            <span class="font-weight-bold">集合</span>
            <div class="h5">
              <span>
                <i class="fas fa-map-marker-alt"></i> <%= @meeting_place %>　
                <i class="fas fa-clock"></i> <%= @meeting_time %>
              </span> 
            </div>
          </div>
          <div class="ml-3">
            <% if @plan.member?(current_user) %>
              <%= link_to "グループチャットを開く", plan_group_chats_path(params[:id]), class: "btn btn-info" %>
            <% end %>
          </div>
        </div>
        <div class="mt-3">
          <span class="border-bottom">主催者からの連絡事項</span><br>
          <span class="rounded px-3 py-1 text-center" style="width:fit-content; background-color: #d4dcda; line-height: 2.5"><%= @memo %></span>
        </div>
      </div>
    </div>
    
    <div class="row border-top py-4">
      <div class="col-6">
        <div class="h-100 rounded" id='map'></div>
      </div>
      <div class="col-6">
        <div class="row">
          <!-- 経由地リスト -->
          <div class="col-6">
            <label>経由地リスト</label>
            <ul id="route-list" class="list-group"></ul>
          </div>
          <!-- 道のり -->
          <div class="col-6">
            <label>道のり - 時間</label>
            <ul id="route-info" class="list-group"></ul>
          </div>
        </div>
      </div>
    </div>
    
    <div class="mb-3 d-flex justify-content-end">
      <span><i class="far fa-user"></i> <%= link_to @plan.user.name, user_path(@plan.user.id) %></span>
    </div>
    
    <div class="border-top py-5">
      <span>参加者</span>
      <div class="form-inline">
        <% @members.each do |member| %>
          <div class="text-center mr-2" style="width:fit-content">
            <% if member.user.image.attached? %>
              <%= image_tag member.user.image, class: "rounded-circle", style: "max-width: 100%; height: 8vw; object-fit: cover" %>
            <% else %>
              <%= image_tag asset_path('noimage.jpg'), class: "rounded-circle", style: "max-width: 100%; height: 8vw; object-fit: cover" %>
            <% end %>
            <br><%= link_to member.user.name, user_path(member.user) %>
          </div>
        <% end %>
      </div>
    </div>
    
    <div class="d-flex justify-content-center border-top py-5">
      <span class="h5 font-weight-bold" style="color: #5c9291; color: #5c9291;"><i class="fas fa-calendar"></i> <%= link_to "企画一覧に戻る", plans_path, style: "color: #5c9291; color: #5c9291; letter-spacing: 0.12em" %></span>
    </div>
  </div>
</div>


<script>
  // codeAddressでも使用する為、mapを関数外で定義&geocoderも用意
  let map
  let geocoder
  let marker = [];
  let info_window = [];
  let mark_pos = [];
  
  // 確認画面表示時にマップ・経由地・ルート情報の表示
  window.onload = function initMap(){
    // geocoder初期化
    geocoder = new google.maps.Geocoder()
    
    // mapの初期位置設定(東京駅)
    // lat：経度 lng：緯度
    map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 35.68136165284377, lng: 139.76705995711325},
    // 地図の拡大率(大きいほど拡大 1〜21)
    zoom: 7
    });
    
    // マップ情報・ピンを表示
    for (let i = 0; i < gon.spot_names.length; i++) {
      // 入力を取得
      let inputAddress = gon.spot_names[i];
    
      // geocodingしたあとmapを移動
      geocoder.geocode( { 'address': inputAddress}, function(results, status) {
        if (status == 'OK') {
          // 変数に情報を入れる
          mark_pos[i] = results[0].geometry.location;
          
            // map.setCenterでmark_posの緯度経度に移動
            map.setCenter(mark_pos[i]);
    
    　　  　// google.maps.MarkerでGoogleMap上の指定位置にマーカが立つ
          marker[i] = new google.maps.Marker({
            map: map,
            position: mark_pos[i]
          });
          
          // 吹き出しに表示する内容(ボタンで経由地に追加)
          info_window[i] = new google.maps.InfoWindow({
            content: gon.spot_names[i]
          });
          
          // マーカー上に吹き出しが自動で出る
          info_window[i].open(map,marker[i]);
          
          // クリックしたら吹き出しをマーカ上に出す
          marker[i].addListener('click', function(){
            info_window[i].open(map,marker[i]);
          });
          
        } else {
          // エラー時の処理
          alert('該当結果がありませんでした：' + status);
        }
      });
    }
    
    // 経由地リストの表示
    for (let i = 0; i < gon.spot_names.length; i++) {
      var li = $('<li>', {
        text: gon.spot_names[i],
        "class": "list-group-item",
        "id": "route-item"
      });
      li.attr("data-lat", gon.spot_lats[i]); // data-latという属性にlatを入れる
      li.attr("data-lng", gon.spot_lngs[i]); // data-lngという属性にlngを入れる
      $('#route-list').append(li);      // idがroute-listの要素の一番後ろにliを追加
    }
    
    // ルート検索画面で表示したルートを再表示
    var points = $('#route-list li');
    var route_names = [];
    var route_lats = [];
    var route_lngs = [];
    
    // hidden_fieldにスポット位置情報を入れる (データ保存用)
    for (let i = 0; i < points.length; i++) {
      route_names[i] = points[i].textContent;
      route_lats[i] = document.getElementById('route-list').children[i].getAttribute('data-lat');
      route_lngs[i] = document.getElementById('route-list').children[i].getAttribute('data-lng');
      //document.getElementById('lng').value = pos_lng;
    }
  
    // 2地点以上の場合
    if (points.length >= 2){
      var origin;          // 開始地点
      var destination;     // 終了地点
      var waypoints = [];  // 経由地点
  
      // origin, destination, waypointsを設定する
      for (let i = 0; i < points.length; i++) {
          points[i] = new google.maps.LatLng($(points[i]).attr("data-lat"), $(points[i]).attr("data-lng"));
          if (i == 0){
            origin = points[i];
          } else if (i == points.length-1){
            destination = points[i];
          } else {
            waypoints.push({ location: points[i], stopover: true });
          }
      }
      
      // リクエストの作成
      var request = {
        origin:      origin,
        destination: destination,
        waypoints: waypoints,
        travelMode:  google.maps.TravelMode.DRIVING // 運転ルートで検索
      }
      
      // ルートサービスのリクエスト
      new google.maps.DirectionsService().route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          new google.maps.DirectionsRenderer({
            map: map,
            suppressMarkers : true
          }).setDirections(response);
          
          // 距離・時間を表示
          var data = response.routes[0].legs;
          var dist_sum = 0;
          var times = [];
          var hour_sum = 0;
          var minute_sum = 0;
          var time_sum = 0;
          
          for (let i = 0; i < data.length; i++) {
            // ルート検索したら道のり・時間を表示
            var info = $('<li>', {
              text: `${data[i].distance.text} - ${data[i].duration.text}`,
              "class": "list-group-item"
            });
            $('#route-info').append(info);  // idがroute-infoの要素の一番後ろに道のり情報を追加
            
            // 道のりの合計値を取得
            if (data[i].distance.text.includes('km')){
              // `km`単位でなければ加算しない(距離が近いと`m`で検索結果が出る)
              dist_sum += Math.round(parseFloat(data[i].distance.text) * 10) / 10;
            }
            
            // 時間の合計値を取得
            // 単位が`時間`か`分`かで計算を分ける
            if (data[i].duration.text.includes('時間')){
              times = data[i].duration.text.split('間');
              hour_sum += Math.round(parseFloat(times[0]));
              minute_sum += Math.round(parseFloat(times[1]));
            } else {
              minute_sum += Math.round(parseFloat(data[i].duration.text));
            }
            
            if (minute_sum > 59){
              hour_sum += Math.floor(minute_sum / 60);
              minute_sum = minute_sum % 60;
            }
            
            if (hour_sum == 0){
              time_sum = `${minute_sum}分`
            } else {
              time_sum = `${hour_sum}時間 ${minute_sum}分`
            }
            
            // 最後の繰り返し処理で行う事
            if (i == data.length - 1){
              info = $('<li>', {
                text: `合計：${dist_sum} km - ${time_sum}`,
                "class": "list-group-item"
              });
              $('#route-info').append(info);  // idがroute-infoの要素の一番後ろに合計を追加
              
              info = $('<li>', {
                text: `-`,
                "class": "list-group-item"
              });
              $('#route-info').prepend(info);  // idがroute-infoの要素の一番前に空の情報を追加
            }
          }
        }
      });
    }
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['SECRET_KEY'] %>&callback=initMap" async defer></script>